// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/segmentio/ksuid"
)

type DocumentCategory string

const (
	DocumentCategoryLegal    DocumentCategory = "legal"
	DocumentCategoryPersonal DocumentCategory = "personal"
	DocumentCategoryBusiness DocumentCategory = "business"
)

func (e *DocumentCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DocumentCategory(s)
	case string:
		*e = DocumentCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for DocumentCategory: %T", src)
	}
	return nil
}

type NullDocumentCategory struct {
	DocumentCategory DocumentCategory `json:"document_category"`
	Valid            bool             `json:"valid"` // Valid is true if DocumentCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDocumentCategory) Scan(value interface{}) error {
	if value == nil {
		ns.DocumentCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DocumentCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDocumentCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DocumentCategory), nil
}

func AllDocumentCategoryValues() []DocumentCategory {
	return []DocumentCategory{
		DocumentCategoryLegal,
		DocumentCategoryPersonal,
		DocumentCategoryBusiness,
	}
}

type DocumentStatus string

const (
	DocumentStatusDraft   DocumentStatus = "draft"
	DocumentStatusPreview DocumentStatus = "preview"
	DocumentStatusFinal   DocumentStatus = "final"
)

func (e *DocumentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DocumentStatus(s)
	case string:
		*e = DocumentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DocumentStatus: %T", src)
	}
	return nil
}

type NullDocumentStatus struct {
	DocumentStatus DocumentStatus `json:"document_status"`
	Valid          bool           `json:"valid"` // Valid is true if DocumentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDocumentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DocumentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DocumentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDocumentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DocumentStatus), nil
}

func AllDocumentStatusValues() []DocumentStatus {
	return []DocumentStatus{
		DocumentStatusDraft,
		DocumentStatusPreview,
		DocumentStatusFinal,
	}
}

type FieldType string

const (
	FieldTypeText     FieldType = "text"
	FieldTypeDate     FieldType = "date"
	FieldTypeCurrency FieldType = "currency"
	FieldTypeNumber   FieldType = "number"
	FieldTypeEmail    FieldType = "email"
	FieldTypeSelect   FieldType = "select"
	FieldTypeTextarea FieldType = "textarea"
	FieldTypeCheckbox FieldType = "checkbox"
	FieldTypeRadio    FieldType = "radio"
)

func (e *FieldType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FieldType(s)
	case string:
		*e = FieldType(s)
	default:
		return fmt.Errorf("unsupported scan type for FieldType: %T", src)
	}
	return nil
}

type NullFieldType struct {
	FieldType FieldType `json:"field_type"`
	Valid     bool      `json:"valid"` // Valid is true if FieldType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFieldType) Scan(value interface{}) error {
	if value == nil {
		ns.FieldType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FieldType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFieldType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FieldType), nil
}

func AllFieldTypeValues() []FieldType {
	return []FieldType{
		FieldTypeText,
		FieldTypeDate,
		FieldTypeCurrency,
		FieldTypeNumber,
		FieldTypeEmail,
		FieldTypeSelect,
		FieldTypeTextarea,
		FieldTypeCheckbox,
		FieldTypeRadio,
	}
}

type Document struct {
	ID          ksuid.KSUID    `json:"id"`
	TemplateID  ksuid.KSUID    `json:"template_id"`
	Name        string         `json:"name"`
	FieldValues []byte         `json:"field_values"`
	FilePath    string         `json:"file_path"`
	Status      DocumentStatus `json:"status"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type DocumentType struct {
	ID          ksuid.KSUID      `json:"id"`
	Name        string           `json:"name"`
	Category    DocumentCategory `json:"category"`
	Description *string          `json:"description"`
	CreatedAt   time.Time        `json:"created_at"`
	UpdatedAt   time.Time        `json:"updated_at"`
}

type Template struct {
	ID        ksuid.KSUID `json:"id"`
	Name      string      `json:"name"`
	TypeID    ksuid.KSUID `json:"type_id"`
	FilePath  string      `json:"file_path"`
	IsActive  bool        `json:"is_active"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type TemplateField struct {
	ID              ksuid.KSUID `json:"id"`
	TemplateID      ksuid.KSUID `json:"template_id"`
	FieldName       string      `json:"field_name"`
	FieldLabel      string      `json:"field_label"`
	FieldType       FieldType   `json:"field_type"`
	IsRequired      bool        `json:"is_required"`
	FieldOrder      int32       `json:"field_order"`
	DefaultValue    *string     `json:"default_value"`
	Placeholder     *string     `json:"placeholder"`
	HelpText        *string     `json:"help_text"`
	ValidationRules []byte      `json:"validation_rules"`
	Options         []byte      `json:"options"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}
