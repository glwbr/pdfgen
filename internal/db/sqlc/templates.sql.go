// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: templates.sql

package db

import (
	"context"
	"time"

	"github.com/segmentio/ksuid"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO templates (name, type_id, file_path, is_active)
VALUES ($1, $2, $3, $4)
RETURNING id, name, type_id, file_path, is_active, created_at, updated_at
`

type CreateTemplateParams struct {
	Name     string      `json:"name"`
	TypeID   ksuid.KSUID `json:"type_id"`
	FilePath string      `json:"file_path"`
	IsActive bool        `json:"is_active"`
}

// Templates
func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.Name,
		arg.TypeID,
		arg.FilePath,
		arg.IsActive,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.FilePath,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
UPDATE templates SET is_active = false WHERE id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, id ksuid.KSUID) error {
	_, err := q.db.Exec(ctx, deleteTemplate, id)
	return err
}

const getTemplateByID = `-- name: GetTemplateByID :one
SELECT id, name, type_id, file_path, is_active, created_at, updated_at FROM templates WHERE id = $1
`

func (q *Queries) GetTemplateByID(ctx context.Context, id ksuid.KSUID) (Template, error) {
	row := q.db.QueryRow(ctx, getTemplateByID, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.FilePath,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTemplateWithType = `-- name: GetTemplateWithType :one
SELECT t.id, t.name, t.type_id, t.file_path, t.is_active, t.created_at, t.updated_at, dt.name as type_name, dt.category
FROM templates t
JOIN document_types dt ON t.type_id = dt.id
WHERE t.id = $1
`

type GetTemplateWithTypeRow struct {
	ID        ksuid.KSUID      `json:"id"`
	Name      string           `json:"name"`
	TypeID    ksuid.KSUID      `json:"type_id"`
	FilePath  string           `json:"file_path"`
	IsActive  bool             `json:"is_active"`
	CreatedAt time.Time        `json:"created_at"`
	UpdatedAt time.Time        `json:"updated_at"`
	TypeName  string           `json:"type_name"`
	Category  DocumentCategory `json:"category"`
}

func (q *Queries) GetTemplateWithType(ctx context.Context, id ksuid.KSUID) (GetTemplateWithTypeRow, error) {
	row := q.db.QueryRow(ctx, getTemplateWithType, id)
	var i GetTemplateWithTypeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.FilePath,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TypeName,
		&i.Category,
	)
	return i, err
}

const listTemplates = `-- name: ListTemplates :many
SELECT id, name, type_id, file_path, is_active, created_at, updated_at FROM templates
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListTemplates(ctx context.Context) ([]Template, error) {
	rows, err := q.db.Query(ctx, listTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Template{}
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TypeID,
			&i.FilePath,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByType = `-- name: ListTemplatesByType :many
SELECT id, name, type_id, file_path, is_active, created_at, updated_at FROM templates
WHERE type_id = $1 AND is_active = true
ORDER BY name
`

func (q *Queries) ListTemplatesByType(ctx context.Context, typeID ksuid.KSUID) ([]Template, error) {
	rows, err := q.db.Query(ctx, listTemplatesByType, typeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Template{}
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TypeID,
			&i.FilePath,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE templates
SET name = $2, type_id = $3, file_path = $4, is_active = $5
WHERE id = $1
RETURNING id, name, type_id, file_path, is_active, created_at, updated_at
`

type UpdateTemplateParams struct {
	ID       ksuid.KSUID `json:"id"`
	Name     string      `json:"name"`
	TypeID   ksuid.KSUID `json:"type_id"`
	FilePath string      `json:"file_path"`
	IsActive bool        `json:"is_active"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, updateTemplate,
		arg.ID,
		arg.Name,
		arg.TypeID,
		arg.FilePath,
		arg.IsActive,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.FilePath,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
